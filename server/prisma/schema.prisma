generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id              Int           @id @default(autoincrement())
  title           String
  author          String
  bookCode        String        @unique
  publicationYear Int?
  tag             String?
  totalCopies     Int
  availableCopies Int           @default(0)
  rentalFee       Float         @default(2)
  lateFeePerDay   Float         @default(2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]
  transactions    Transaction[]
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  salt         String
  fullName     String
  phone        String
  idNumber     String
  blockNumber  String
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orders       Order[]
  transactions Transaction[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  bookId    Int
  status    OrderStatus @default(PENDING)
  orderDate DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Transaction {
  id           Int               @id @default(autoincrement())
  userId       Int
  bookId       Int
  rentalDate   DateTime
  dueDate      Int
  status       TransactionStatus @default(PENDING)
  returnedDate DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  book         Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  ACCEPTED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  RETURNED
  OVERDUE
  CANCELLED
}
